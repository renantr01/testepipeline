name: Deploy with Docker Compose - Advanced

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: # Permite execução manual

env:
  PROJECT_PATH: "/home/${{ secrets.SERVER_USER }}/testepipeline" # Ajuste conforme necessário

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production # Opcional: usar environments para proteção
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERVER_PRIVATE_SSH_KEY }}

      - name: Add Server to Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to Remote Server
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          PHPIPAM_USER: ${{ secrets.PHPIPAM_USER }}
          PHPIPAM_PASSWORD: ${{ secrets.PHPIPAM_PASSWORD }}
        run: |
          ssh -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << EOF
            set -e  # Parar em caso de erro
            
            echo "=== [$(date)] Iniciando deploy ==="
            
            # Verificar se Docker e Docker Compose estão instalados
            if ! command -v docker &> /dev/null; then
                echo "ERROR: Docker não está instalado no servidor"
                exit 1
            fi
            
            if ! command -v docker compose &> /dev/null && ! command -v docker-compose &> /dev/null; then
                echo "ERROR: Docker Compose não está instalado no servidor"
                exit 1
            fi
            
            # Criar diretório do projeto se não existir
            mkdir -p ${{ env.PROJECT_PATH }}
            cd ${{ env.PROJECT_PATH }}
            
            # Clonar ou atualizar repositório
            if [ -d ".git" ]; then
                echo "=== Atualizando repositório existente ==="
                git fetch origin
                git reset --hard origin/main
                git clean -fd
            else
                echo "=== Clonando repositório ==="
                git clone https://github.com/renantr01/testepipeline.git .
            fi
            
            # Verificar se docker-compose.yml existe
            if [ ! -f "docker-compose.yml" ]; then
                echo "ERROR: docker-compose.yml não encontrado no projeto"
                exit 1
            fi
            
            # Parar containers existentes (sem falhar se não existirem)
            echo "=== Parando containers existentes ==="
            docker compose down --remove-orphans || true
            
            # Remover imagens antigas (opcional)
            echo "=== Limpando imagens não utilizadas ==="
            docker image prune -f || true
            
            # Fazer pull das imagens (se definidas no compose)
            echo "=== Fazendo pull das imagens ==="
            docker compose pull || echo "Aviso: Algumas imagens podem não ter pull disponível"
            
            # Build e iniciar containers
            echo "=== Iniciando containers ==="
            docker compose up --build -d
            
            # Aguardar containers iniciarem
            echo "=== Aguardando containers iniciarem ==="
            sleep 10
            
            # Verificar se containers estão rodando
            echo "=== Status dos containers ==="
            docker compose ps
            
            # Verificar logs para possíveis erros
            echo "=== Logs recentes dos containers ==="
            docker compose logs --tail=20
            
            # Verificar se algum container saiu com erro
            if docker compose ps | grep -q "Exit"; then
                echo "ERROR: Alguns containers saíram com erro"
                docker compose logs
                exit 1
            fi
            
            echo "=== [$(date)] Deploy concluído com sucesso ==="
          EOF

      - name: Notify Success
        if: success()
        run: echo "✅ Deploy realizado com sucesso!"

      - name: Notify Failure
        if: failure()
        run: echo "❌ Deploy falhou! Verifique os logs acima."
